name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, gd, zip, bcmath
        tools: composer:v2

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-dev

    - name: Check PHP syntax
      run: find . -name "*.php" -not -path "./vendor/*" -not -path "./storage/*" -not -path "./bootstrap/cache/*" | xargs -l1 php -l

    - name: Check code style (if PHPCS is available)
      run: |
        if [ -f "vendor/bin/phpcs" ]; then
          vendor/bin/phpcs --standard=PSR12 app/
        else
          echo "PHPCS not installed, skipping code style check"
        fi
      continue-on-error: true

  tests:
    name: Tests (PHP ${{ matrix.php }})
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        php: ['8.2', '8.3']
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: propaganda_testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php }}
        extensions: mbstring, dom, fileinfo, mysql, gd, zip, bcmath
        coverage: xdebug

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ matrix.php }}-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-${{ matrix.php }}-
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"

    - name: Generate app key
      run: php artisan key:generate

    - name: Configure database
      run: |
        echo "CACHE_DRIVER=array" >> .env
        echo "QUEUE_CONNECTION=sync" >> .env
        echo "SESSION_DRIVER=array" >> .env
        php artisan config:clear
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: propaganda_testing
        DB_USERNAME: root
        DB_PASSWORD: password
        CACHE_DRIVER: array
        QUEUE_CONNECTION: sync
        SESSION_DRIVER: array

    - name: Run database migrations
      run: php artisan migrate --force
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: propaganda_testing
        DB_USERNAME: root
        DB_PASSWORD: password

    - name: Create superadmin user for tests
      run: php artisan user:create-superadmin --email=test@example.com --name="Test Admin" --password=testpassword
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: propaganda_testing
        DB_USERNAME: root
        DB_PASSWORD: password

    - name: Run critical new functionality tests
      run: |
        echo "Testing new user management and IAA position accuracy functionality..."
        php artisan test tests/Unit/Commands/CreateSuperAdminCommandTest.php
        php artisan test tests/Unit/Services/PositionAccuracyTest.php  
        php artisan test tests/Unit/Models/UserTest.php
        php artisan test tests/Feature/UserManagementTest.php
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: propaganda_testing
        DB_USERNAME: root
        DB_PASSWORD: password

    - name: Run Position Accuracy Tests
      run: php artisan test --filter=PositionAccuracyTest
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: propaganda_testing
        DB_USERNAME: root
        DB_PASSWORD: password

    - name: Run User Management Tests
      run: php artisan test --filter=UserTest
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: propaganda_testing
        DB_USERNAME: root
        DB_PASSWORD: password

    - name: Test Console Commands
      run: |
        php artisan user:create-superadmin --email=ci@example.com --name="CI Admin" --password=cipassword
        php artisan metrics:recalculate-position-accuracy --force
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: propaganda_testing
        DB_USERNAME: root
        DB_PASSWORD: password

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, gd, zip, bcmath

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Check for security vulnerabilities
      run: |
        if [ -f "vendor/bin/security-checker" ]; then
          vendor/bin/security-checker security:check composer.lock
        elif command -v symfony &> /dev/null; then
          symfony check:security
        else
          echo "No security checker available, checking manually..."
          composer audit
        fi
      continue-on-error: true

    - name: Check for sensitive files
      run: |
        echo "Checking for sensitive files that shouldn't be committed..."
        if [ -f ".env" ]; then
          echo "Warning: .env file found in repository"
        fi
        if find . -name "*.log" -not -path "./vendor/*" | grep -q .; then
          echo "Warning: Log files found in repository"
        fi
        if find . -name "*.key" -not -path "./vendor/*" | grep -q .; then
          echo "Warning: Key files found in repository"
        fi

  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [tests, security]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Validate PR title
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        if echo "$PR_TITLE" | grep -qE "^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .+"; then
          echo "✅ PR title follows conventional commits format: $PR_TITLE"
        else
          echo "❌ PR title must follow conventional commits format: type(scope): description"
          echo "Examples: feat: add user management, fix(metrics): position accuracy calculation"
          echo "Current title: $PR_TITLE"
          exit 1
        fi

    - name: Check for merge conflicts
      run: |
        git merge-tree $(git merge-base HEAD main) HEAD main | grep -q "<<<<<<< " && echo "Merge conflicts detected" && exit 1 || echo "No merge conflicts"

    - name: Validate migration files
      run: |
        echo "Checking for new migration files..."
        NEW_MIGRATIONS=$(git diff --name-only main...HEAD | grep "database/migrations/" || true)
        if [ ! -z "$NEW_MIGRATIONS" ]; then
          echo "New migrations found:"
          echo "$NEW_MIGRATIONS"
          echo "Ensure migrations are backward compatible"
        fi

    - name: Check documentation updates
      run: |
        echo "Checking if documentation needs updates..."
        CODE_CHANGES=$(git diff --name-only main...HEAD | grep -E "\.(php|js|vue)$" | wc -l)
        DOC_CHANGES=$(git diff --name-only main...HEAD | grep -E "\.(md|txt)$" | wc -l)
        
        if [ "$CODE_CHANGES" -gt 10 ] && [ "$DOC_CHANGES" -eq 0 ]; then
          echo "Warning: Significant code changes without documentation updates"
          echo "Consider updating README.md, CLAUDE.md, or docs/ files"
        fi

  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [tests, security]
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, gd, zip, bcmath

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --optimize-autoloader --no-dev

    - name: Test production config
      run: |
        cp .env.example .env
        php artisan key:generate
        php artisan config:cache
        php artisan route:cache
        php artisan view:cache
        echo "Production caching successful"

    - name: Validate deployment requirements
      run: |
        echo "Checking deployment requirements..."
        php artisan about
        echo "PHP version: $(php -v | head -n 1)"
        echo "Laravel version: $(php artisan --version)"
        echo "Required extensions present"